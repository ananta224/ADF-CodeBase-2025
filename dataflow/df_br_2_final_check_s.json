{
	"name": "df_br_2_final_check_s",
	"properties": {
		"folder": {
			"name": "BR-ADF Tasks"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_mysql_ananta_adf",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_mysql_ananta_dyn",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "makeNestedObject"
				},
				{
					"name": "tableStructure"
				}
			],
			"scriptLines": [
				"source(output(",
				"          emp_id as integer,",
				"          fullName as string,",
				"          dept_id as integer,",
				"          dept_name as string,",
				"          position as string,",
				"          salary as integer,",
				"          hire_date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     tableName: 'employees',",
				"     store: 'mysql',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
				"source1 derive(fullName = split(fullName, '^')) ~> derivedColumn1",
				"derivedColumn1 foldDown(unroll(fullName),",
				"     mapColumn(",
				"          emp_id,",
				"          fullName,",
				"          dept_id,",
				"          dept_name,",
				"          position,",
				"          salary,",
				"          hire_date",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 aggregate(groupBy(emp_id),",
				"     fullName = collect(@(fullName=fullName)),",
				"          dept_id = first(dept_id),",
				"          dept_name = first(dept_name),",
				"          position = first(position),",
				"          salary = first(salary),",
				"          hire_date = first(hire_date)) ~> aggregate1",
				"aggregate1 derive(fullName = iif(isNull(fullName[2]),fullName[1].fullName, toString(fullName))) ~> makeNestedObject",
				"makeNestedObject aggregate(employees_tb = toString(collect(@(emp_id=emp_id, fullName=fullName, dept_id=dept_id,dept_name=dept_name,position=position,salary=salary,hire_date=hire_date)))) ~> tableStructure",
				"tableStructure sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}